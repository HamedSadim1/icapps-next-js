// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Admin {
//   id               String            @id @default(auto()) @map("_id") @db.ObjectId
//   name             String            @unique
//   email            String            @unique
//   startdate        DateTime          @default(now())
//   enddate          DateTime?
//   stageBegeleiders StageBegeleider[]
//   stagiairs        Stagiair[]
//   stages           Stage[]
// }

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  email      String    @unique
  createdAt  DateTime  @default(now())
  role       UserRole  @default(ADMIN)
  img        String?
  stagiairID String?   @db.ObjectId
  stagiair   Stagiair? @relation(fields: [stagiairID], references: [id])
}

enum UserRole {
  ADMIN
  STAGIAIR
  STAGEBEGELEIDER
}

model StageBegeleider {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  name                String              @unique
  email               String              @unique
  role                UserRole            @default(STAGEBEGELEIDER)
  stagebescrhivingIDS String[]            @db.ObjectId
  stagiairs           String[]            @db.ObjectId
  stagebeschrijvings  StageBeschrijving[] @relation(fields: [stagebescrhivingIDS], references: [id])
  stagiair            Stagiair[]          @relation(fields: [stagiairs], references: [id])

  // adminId   String     @db.ObjectId
  // admin     Admin      @relation(fields: [adminId], references: [id])
}

model Stagiair {
  id                       String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String
  role                     UserRole                   @default(STAGIAIR)
  startDate                DateTime                   @default(now())
  endDate                  DateTime                   @default("2024-01-01T00:00:00.000Z")
  stagebegeleiderId        String[]                   @db.ObjectId
  stagebegeleider          StageBegeleider[]          @relation(fields: [stagebegeleiderId], references: [id])
  stagebeschriving         StageBeschrijving[]
  // adminId           String          @db.ObjectId
  // admin             Admin           @relation(fields: [adminId], references: [id])
  posts                    Doelen[]
  user                     User[]
  documents                Document[]
  checklistSectionStagebegeleider CheckListSectionStageBegeleider[]
  checklistsection         ChecklistSection[]
}

model StageBeschrijving {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  beschrijving           String
  school                 String
  stagebegeleider        StageBegeleider[] @relation(fields: [stagebegeleiderIDS], references: [id])
  stagebegeleiderIDS     String[]          @unique @db.ObjectId
  stagiair               Stagiair          @relation(fields: [stagiairId], references: [id])
  stagiairId             String            @unique @db.ObjectId
  contactPersoonName     String
  contactPersoonEmail    String
  contactPersoonTelefoon String

  //  adminId           String          @db.ObjectId
  //   admin             Admin           @relation(fields: [adminId], references: [id])
}

//! Doelen  startDatum, 
//! endDate default => because diffecult to work in in postman
model Doelen {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  body       String
  createdAt  DateTime  @default(now())
  endDate    DateTime  @default("2024-01-01T00:00:00.000Z")
  stagiair   Stagiair  @relation(fields: [stagiairID], references: [id])
  stagiairID String    @db.ObjectId
  comments   Comment[]
}

//! Comment
model Comment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  comment         String
  doel            Doelen   @relation(fields: [postId], references: [id])
  createdAt       DateTime @default(now())
  postId          String   @db.ObjectId
  img             String
  commentatorName String
}

//! Document
model Document {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  original_filename    String
  url                  String
  secure_url           String
  public_id            String
  created_at           DateTime          @default(now())
  stagiair             Stagiair          @relation(fields: [stagiairID], references: [id])
  stagiairID           String            @db.ObjectId
  bytes                Int               @default(0)
  resource_type        String
  comments             DocumentComment[]
  img                  String?
  documentUploaderName String?
}

//! DocumentComment
model DocumentComment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  comment         String
  document        Document @relation(fields: [documentID], references: [id])
  createdAt       DateTime @default(now())
  documentID      String   @db.ObjectId
  img             String
  commentatorName String
}

//! ChecklistItem
model ChecklistItem {
  id                     String           @id @default(auto()) @map("_id") @db.ObjectId
  title                  String
  isChecked              Boolean          @default(false)
  createdAt              DateTime         @default(now())
  date                   DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  checklistItemSection   ChecklistSection @relation(fields: [checklistItemSectionID], references: [id])
  checklistItemSectionID String           @db.ObjectId
}

//! ChecklistSection
model ChecklistSection {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  sectionTitle String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  items        ChecklistItem[]
  stagiair     Stagiair        @relation(fields: [stagiairID], references: [id])
  stagiairID   String          @db.ObjectId
}

//! CheckListStageBegeleider
model CheckListSectionStageBegeleider {
  id               String                            @id @default(auto()) @map("_id") @db.ObjectId
  sectionTitle     String
  createdAt        DateTime                          @default(now())
  stagiair         Stagiair                          @relation(fields: [stagiairID], references: [id])
  stagiairID       String                            @db.ObjectId
  date             DateTime                          @default(now())
  updatedAt        DateTime                          @updatedAt
  checklistItem ChecklistItemStageBegeleider[]
}

model ChecklistItemStageBegeleider {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  title                  String
  date                   DateTime                 @default(now())
  isChecked              Boolean                  @default(false)
  updatedAt              DateTime                 @updatedAt
  checklistItemSection   CheckListSectionStageBegeleider @relation(fields: [checklistItemSectionID], references: [id])
  checklistItemSectionID String                   @db.ObjectId
}

